{"version":3,"sources":["api/just_real_food_api.js","NewCartContext.js","components/products/NewCartProduct.js","api/stripe_api.js","auth/UserContext.js","routes-nav/NewNavBar.js","components/home/Home.js","components/common/Alert.js","auth/SignupAndLoginForms.js","components/products/NewProducts.js","components/common/LoadingSpinner.js","components/products/NewProductList.js","components/products/ProductDogOrCatFood.js","components/products/NewProductDetail.js","components/Cancel.js","components/Success.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","hooks/useLocalStorage.js","NewApp.js","index.js"],"names":["JustRealFoodApi","endpoint","data","arguments","length","undefined","method","url","concat","process","headers","Authorization","token","params","axios","err","console","error","response","message","Array","isArray","email","this","request","user","name","products","category","NewCartContext","createContext","items","getProductQuantity","addOneItemToCart","removeOneItemFromCart","deleteFromCart","getTotalCost","async","getProductData","CartProvider","_ref","children","cartProducts","setCartProducts","useState","id","productData","getAllProducts","find","product","log","_cartProducts$find","quantity","filter","contextValue","price","map","totalCost","totalCostArray","Promise","all","React","createElement","Provider","value","NewCartProduct","cart","useContext","setProductData","useEffect","then","Fragment","toFixed","Button","variant","size","onClick","StripeApi","userId","UserContext","NavbarComponent","logout","currentUser","setTotalCost","show","setShow","handleClose","handleShow","checkout","sessionUrl","window","location","assign","productsCount","reduce","sum","LoggedInUser","Navbar","className","expand","NavLink","exact","to","xmlns","width","height","fill","viewBox","d","Modal","onHide","Header","closeButton","Title","Body","cartItem","idx","key","LoggedOutUser","Nav","Home","style","backgroundImage","backgroundRepeat","backgroundSize","marginLeft","Alert","type","messages","role","SignupAndLoginForms","signup","login","registerFormInputData","setRegisterFormInputData","password","loginFormInputData","setLoginFormInputData","registerFormErrors","setRegisterFormErrors","loginFormErrors","setLoginFormErrors","history","useHistory","handleRegisterChange","event","target","handleLoginChange","onSubmit","preventDefault","result","success","push","errors","htmlFor","onChange","autoComplete","NewProducts","Link","image_url1","src","alt","LoadingSpinner","NewProductList","setProducts","listAll","align","Row","xs","md","Col","ProductDogOrCatFood","useParams","getProductByCategory","listDogOrCatFoods","NewProductDetail","setProduct","ingredients","calorie_count","getProductByName","getProduct","productResult","productQuantity","Card","Form","as","Label","column","sm","Text","image_url3","Img","image_url2","Cancel","Success","PrivateRoute","path","isRequestCompleted","Redirect","Route","Routes","Switch","useLocalStorage","firstValue","initialValue","localStorage","getItem","item","setItem","removeItem","App","infoLoaded","setInfoLoaded","setCurrentUser","setToken","setIsRequestCompleted","jwt","decode","getCurrentUser","BrowserRouter","Container","NewNavBar","loginData","signupData","ReactDOM","render","NewApp","document","getElementById"],"mappings":"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","file":"static/js/main.0fdd67f1.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** JustRealFood API Class.\n *\n * Static class tying together methods used to get/send to the API.\n *\n */\n\nclass JustRealFoodApi {\n  // the user token for interaction with the API will be stored here\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JustRealFoodApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"JustRealFood API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user */\n\n  static async getCurrentUser(email) {\n    let res = await this.request(`api/users/${email}`);\n    return res.user;\n  }\n\n  /** Get a list of all products (filtered by 'name' if not undefined)*/\n\n  static async getAllProducts(name) {\n    let res = await this.request(\"api/products\", { name });\n    return res.products;\n  }\n\n  /** Get details on a product by name  */\n\n  static async getProductByName(name) {\n    let res = await this.request(`api/products/name/${name}`);\n    return res.products;\n  }\n\n  /** Get a list of products by category */\n\n  static async getProductByCategory(category) {\n    let res = await this.request(`api/products/category/${category}`);\n    return res.products;\n  }\n\n  /** User Signup */\n\n  static async signup(data) {\n    let res = await this.request(\"api/auth/user/register\", data, \"post\");\n    return res.token;\n  }\n\n  /** Get token for login from user email and password */\n\n  static async login(data) {\n    let res = await this.request(`api/auth/user/token`, data, \"post\");\n    return res.token;\n  }\n}\n\nexport default JustRealFoodApi;\n","import React, { createContext, useState } from \"react\";\nimport JustRealFoodApi from \"./api/just_real_food_api\";\n\n// initialize CartContext with an object containing everything you want other components to be able to access\nexport const NewCartContext = createContext({\n  // 'items' will contain all the items that have been added to the cart with their ids, names, prices and quantities (set equal to piece of state 'cartProducts' below)\n  items: [],\n  // functions are not defined within Context, they are defined below. These are just placeholders. The functions are passed to the values of the Provider as ContextValues\n  getProductQuantity: () => {},\n  addOneItemToCart: () => {},\n  removeOneItemFromCart: () => {},\n  deleteFromCart: () => {},\n  getTotalCost: async () => {},\n  getProductData: async () => {},\n});\n\n// any components wrapped by CartProvider (in NewApp.js) are the {children}\nexport function CartProvider({ children }) {\n  // initialize piece of state 'cartProducts' to an empty array. It will store all the items and their ids, names, prices and quantities that have been added to the cart (i.e. [{id:price_1OhYS8DDC8UyWYkq9owqgv54, name: 'Beef & Salmon', price: 98.49, quantity:1}, {id:price_1OhYS8DDC8UyWYkq9owqgv54 , name: 'Chicken & Turkey', price: 98.49, quantity:2}, ...])\n  const [cartProducts, setCartProducts] = useState([]);\n\n  async function getProductData(id) {\n    // retrieve all products from the database\n    let productsArray = await JustRealFoodApi.getAllProducts();\n\n    // .find() loops over every 'product' in productsArray and looks to see if the product.id equals the 'id' passed in from the parameters. The product object with matching id is returned.\n    // (i.e. for product with id=price_1OhYS8DDC8UyWYkq9owqgv54, productData = {id: 'price_1OhYS8DDC8UyWYkq9owqgv54', name: 'Chicken & Turkey', ingredients: 'Chicken, turkey, chicken hearts, flaxseed, sweet p…d yeast, mixed tocopherols (natural preservative)', calorie_count: '349 kcal/cup', category: 'DogFood'})\n    let productData = productsArray.find((product) => product.id === id);\n\n    // if there are no products with an id of 'id' return undefined\n    if (productData === undefined) {\n      console.log(\"Product data does not exist for ID: \" + id);\n      return undefined;\n    }\n    // returns the data of a product 'productData' that has an id that equals the 'id' passed in as a prop\n    return productData;\n  }\n\n  // get the quantity of a product with a specific 'id' in the cart and return the quantity\n  function getProductQuantity(id) {\n    // .find() loops over every product object in piece of state 'CartProducts' array to see if there's a product with the same id as 'id' that's passed in as a prop. The ? means, if there is, then return its quantity. If not, return 0 as the quantity\n    const quantity = cartProducts.find(\n      (product) => product.id === id\n    )?.quantity;\n\n    if (quantity === undefined) {\n      return 0;\n    }\n\n    return quantity;\n  }\n\n  // add a product with an id equal to the id passed in as a prop to the piece of state 'cartProducts' array\n  async function addOneItemToCart(id) {\n    // call the function above 'getProductQuantity' for a specific product with 'id' in piece of state cartProducts\n    const quantity = getProductQuantity(id);\n    // call the function above 'getProductData' to retrieve the data of a product 'productData' that has an id that matches 'id' passed in as a prop\n    const productData = await getProductData(id);\n\n    // if the quantity of the product with 'id' is zero (means quantity is undefined and product is not in the cart)\n    if (quantity === 0) {\n      // add a new object (containing the product id, name, price and a quantity of 1 for the product with an id equaling the id passed in) to all the objects already in the piece of state 'cartProducts' array\n      setCartProducts([\n        ...cartProducts,\n        {\n          id: id,\n          name: productData.name,\n          price: productData.price,\n          quantity: 1,\n        },\n      ]);\n    } else {\n      // if product with 'id' is in piece of state 'cartProducts' array (has a quantity > 0), map over all the product objects in 'cartProducts', and for every object, check to see if its id matches the id passed in as a prop. If so, overwrite its quantity property by adding 1 to its current value and add it to 'cartProducts' along with the other properties of 'product' (i.e. id, name, price). If there isn't a product with 'id', add that product to the cartProducts array\n\n      setCartProducts(\n        cartProducts.map((product) =>\n          product.id === id\n            ? { ...product, quantity: product.quantity + 1 }\n            : product\n        )\n      );\n    }\n  }\n\n  // removes a product with an id equal to the id passed in as a prop from piece of state 'cartProducts' array\n  function removeOneItemFromCart(id) {\n    // get the quantity of a specific product with 'id'\n    const quantity = getProductQuantity(id);\n\n    // if the product with a specific 'id' has a quantity of 1, it should be deleted from the cart altogether (since if remove 1 from its quantity, it will have a quantity of 0) so call deleteFromCart function\n    if (quantity === 1) {\n      deleteFromCart(id);\n    } else {\n      // if product with a specific 'id' has a quantity > 1, map over all the product objects in the piece of state 'cartProducts' array, and for every object, check to see if its id matches the id passed in as a prop. If so, overwrite its quantity property by subtracting 1 from its current value and add it to cartProducts along with the other properties of 'product' (i.e. id, name, price). If there isn't a product with 'id', add that product to the cartProducts array.\n      setCartProducts(\n        cartProducts.map((product) =>\n          product.id === id\n            ? { ...product, quantity: product.quantity - 1 }\n            : product\n        )\n      );\n    }\n  }\n\n  // deletes all products with the same id as the id passed in as a prop from the piece of state 'cartProducts' array\n  function deleteFromCart(id) {\n    setCartProducts((cartProducts) =>\n      // .filter() starts with an empty array and will pass over all the product objects in the piece of state 'cartProducts' array, and for every product with an id that does not match the id passed in as a prop (products not to be deleted), add that product object to the new array. Everything added to that new array will be the products that are not to be deleted. Then reset cartProducts with that new array.\n      cartProducts.filter((product) => {\n        return product.id !== id;\n      })\n    );\n  }\n\n  async function getTotalCost() {\n    // initialize totalCost\n    let totalCost = 0;\n    // map over all the product objects in the piece of state 'cartProducts' array, and for every product object, call the getProductData function with the product.id passed in as a prop. This function returns all the data pertaining to that specific product with 'id'. The cost of each product being mapped over is then added to 'totalCost' with the totalCost of all products in cartProducts returned.\n    // ** Need to add 'async' and 'await' as getProductData is an async function and it needs to wait for the Api respone before returning productData\n    const totalCostArray = cartProducts.map(async (product) => {\n      const productData = await getProductData(product.id);\n      totalCost += productData.price * product.quantity;\n    });\n    await Promise.all(totalCostArray);\n    return totalCost;\n  }\n\n  // items is set equal to piece of state 'cartProducts'\n  const contextValue = {\n    items: cartProducts,\n    getProductQuantity,\n    addOneItemToCart,\n    removeOneItemFromCart,\n    deleteFromCart,\n    getTotalCost,\n    getProductData,\n  };\n\n  return (\n    // Provider gives any component wrapped in it access to everything in CartContext with the contextValue (i.e. items, getProductQuantity(), addOneToCart(), etc). In the NewApp.js file, CartProvider is wrapped around the whole app (NavBar and all Routes)\n    <NewCartContext.Provider value={contextValue}>\n      {children}\n    </NewCartContext.Provider>\n  );\n}\n\nexport default CartProvider;\n","import Button from \"react-bootstrap/Button\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { NewCartContext } from \"../../NewCartContext\";\n\n/**\n * On mount, loads cart product names, quantities and prices in the Modal\n *\n * This is routed to in NewNavBar, loggedInUser()\n *\n */\n\n// cart.id and cart.quantity are passed in as props from the Modal in the NewNavBar component\nfunction NewCartProduct({ id, quantity }) {\n  // useContext gives access to all the properties in NewCartContext (i.e. cart.items, cart.getProductQuantity(product.id), etc)\n  const cart = useContext(NewCartContext);\n\n  // intialize piece of state 'productData' to an empty array\n  const [productData, setProductData] = useState([]);\n\n  // useEffect will make an API call once when component is rendered and whenever 'cart' and 'id' change value. The getProductData() function (defined in NewCartContext) is executed and the details of the product with 'id' is retrieved.  Piece of state 'productData' is then updated with those retrieved details.\n\n  // when calling async functions within useEffect (getProductData in NewCartContext is an async function), use '.then' after the function to set the piece of state\n  useEffect(() => {\n    cart.getProductData(id).then((productData) => {\n      setProductData(productData);\n    });\n  }, [cart, id]);\n\n  return (\n    <>\n      <h3>{productData.name}</h3>\n      <p>{quantity} total</p>\n      <p>${(quantity * productData.price).toFixed(2)}</p>\n      <Button\n        variant=\"danger\"\n        size=\"sm\"\n        onClick={() => cart.deleteFromCart(id)}\n      >\n        Remove\n      </Button>\n      <hr></hr>\n    </>\n  );\n}\n\nexport default NewCartProduct;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/**\n *Stripe API Class\n */\n\nclass StripeApi {\n  static async request(endpoint, data = {}, method = \"get\") {\n    const url = `${BASE_URL}/${endpoint}`;\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params })).data;\n    } catch (err) {\n      console.error(\"Stripe API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** customer checkout in Stripe */\n\n  // 'items' and 'userId' (passed in as props from checkout function in NewNavBar component) are sent along with the POST request as the body of the request\n  static async checkout(items, userId) {\n    let res = await this.request(\n      `api/stripe/checkout`,\n      { items, userId },\n      \"post\"\n    );\n    return res.url;\n  }\n}\n\nexport default StripeApi;\n","import React from \"react\";\n\n// UserContext allows 'currentUser' to be passed down to child components as a prop\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import { Button, Navbar, Modal } from \"react-bootstrap\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Nav } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { NewCartContext } from \"../NewCartContext\";\nimport NewCartProduct from \"../components/products/NewCartProduct\";\nimport StripeApi from \"../api/stripe_api\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./NewNavBar.css\";\n\nfunction NavbarComponent({ logout }) {\n  // useContext gives access to all the properties in NewCartContext (i.e. cart.items, cart.getProductQuantity(product.id), etc)\n  const cart = useContext(NewCartContext);\n\n  // deconstruct 'currentUser' from context value of UserContext declared in NewApp component\n  const { currentUser } = useContext(UserContext);\n  // initialize piece of state 'totalCost'\n  const [totalCost, setTotalCost] = useState(0);\n\n  // piece of state 'show' is used for the Modal and is initialized to false so Modal doesn't show right away\n  const [show, setShow] = useState(false);\n\n  // when using useEffect for async functions (getTotalCost in CartContext is an async function), use .then after the function to set the piece of state. Also need to add cart as a dependency so that whenever cart is updated/changed, cart.getTotalCost is executed again to get updated total cost\n  useEffect(() => {\n    cart.getTotalCost().then((totalCost) => {\n      setTotalCost(totalCost);\n    });\n  }, [cart]);\n\n  // 'handleClose' is a callback function that sets piece of state 'show' to false and is executed when when either the browser page is clicked on or when the exit button is clicked in the Modal so the Modal is hidden\n  const handleClose = () => setShow(false);\n\n  // 'handleShow' is a callback function that sets piece of state 'show' to true (so Modal shows) and is executed when click on cart button\n  const handleShow = () => setShow(true);\n\n  // 'checkout' is an onClick function that executes when the 'Proceed to Checkout' button is clicked in the Modal\n  const checkout = async () => {\n    // pass cart.items and currentUser in as the body of the request\n    let sessionUrl = await StripeApi.checkout(cart.items, currentUser);\n\n    // redirect the user to the Stripe payment page\n    window.location.assign(sessionUrl);\n  };\n\n  // .reduce(sum, product) gives access to all the product quantities in cart.items and adds them one at a time to 'sum' (initialized to 0), returning the total sum. (i.e. cart.items=[{id:1, name: Beef & Salmon, price: 98.49, quantity:2}, {id:4, name: Bison, price: 98.49, quantity:1}, ...])\n  const productsCount = cart.items.reduce(\n    (sum, product) => sum + product.quantity,\n    0\n  );\n\n  // executes when user is logged in to show cart and logout links in the navbar\n  function LoggedInUser() {\n    return (\n      <Navbar className=\"fixed-top\" expand=\"sm\">\n        <>\n          <ul className=\"navbar-nav\">\n            <li className=\"active\">\n              <NavLink className=\"nav-link\" exact to=\"/\">\n                Home\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink className=\"nav-link\" exact to=\"/api/products\">\n                All Products\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink\n                className=\"nav-link\"\n                exact\n                to=\"/api/products/category/DogFood\"\n              >\n                Dog Food\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink\n                className=\"nav-link\"\n                exact\n                to=\"/api/products/category/CatFood\"\n              >\n                Cat Food\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <Button className=\"cart-in-navbar\" onClick={handleShow}>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"25\"\n                  height=\"25\"\n                  fill=\"currentColor\"\n                  className=\"bi bi-cart\"\n                  viewBox=\"0 0 16 16\"\n                >\n                  <path d=\"M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5M3.102 4l1.313 7h8.17l1.313-7zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4m7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2m7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2\" />\n                </svg>\n                {productsCount}\n              </Button>\n            </li>\n            {/* <li className=\"active\"> */}\n            <NavLink className=\"logout-link\" to=\"/\" onClick={logout}>\n              Log Out\n            </NavLink>\n            {/* </li> */}\n          </ul>\n          <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n              {/* adds a title to the Modal */}\n              <Modal.Title>Shopping Cart</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {productsCount > 0 ? (\n                <>\n                  <p>Items in your cart:</p>\n                  {/* map over all the cartItem objects in cart.items array (i.e. [{id:1, name: Beef & Salmon, price: 98.49, quantity:2}, {id:4, name: Bison, price: 98.49, quantity:1}, ...]) and for every cartItem, render the NewCartProduct component with key, id and quantity passed in as props. NewCartProduct shows all the items in the cart */}\n                  {cart.items.map((cartItem, idx) => (\n                    <NewCartProduct\n                      key={idx}\n                      id={cartItem.id}\n                      quantity={cartItem.quantity}\n                    ></NewCartProduct>\n                  ))}\n                  {/* piece of state 'totalCost' is rounded to 2 decimal places to show the total cost of the cart */}\n                  <h1>Total: ${totalCost.toFixed(2)}</h1>\n                  {/* when click on 'Proceed to Checkout' button, the checkout function will execute and make a POST request to the backend route '/checkout' and pass cart.items to the backend in the request body. On the backend, cart.items will be formatted how Stripe likes them, and Stripe creates a session with the formatted lineItems array. Once the session is created, the session url is sent back to the frontend, to be used by the checkout function to forward the user to the Stripe payment page */}\n\n                  <button className=\"cart-checkout\" onClick={checkout}>\n                    Proceed to Checkout\n                  </button>\n                </>\n              ) : (\n                <h1 className=\"navbar-msg\">There are no items in your cart!</h1>\n              )}\n            </Modal.Body>\n          </Modal>\n        </>\n      </Navbar>\n    );\n  }\n\n  function LoggedOutUser() {\n    return (\n      <Navbar className=\"fixed-top\" expand=\"sm\">\n        <>\n          <ul className=\"navbar-nav\">\n            <li className=\"active\">\n              <NavLink className=\"nav-link\" exact to=\"/\">\n                Home\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink className=\"nav-link\" exact to=\"/api/products\">\n                All Products\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink\n                className=\"nav-link\"\n                exact\n                to=\"/api/products/category/DogFood\"\n              >\n                Dog Food\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink\n                className=\"nav-link\"\n                exact\n                to=\"/api/products/category/CatFood\"\n              >\n                Cat Food\n              </NavLink>\n            </li>\n            <li className=\"active\">\n              <NavLink className=\"nav-link\" exact to=\"/signup\">\n                Sign In\n              </NavLink>\n            </li>\n          </ul>\n        </>\n      </Navbar>\n    );\n  }\n\n  return (\n    <Nav className=\"navbar navbar-expand-md\">\n      {currentUser ? <LoggedInUser /> : <LoggedOutUser />}\n    </Nav>\n  );\n}\n\nexport default NavbarComponent;\n","import React from \"react\";\nimport \"./Home.css\";\n\nfunction Home() {\n  return (\n    <div className=\"Homepage\">\n      <div className=\"homepage-container\">\n        <h1 className=\"homepage-title\">Just Real Food for Dogs and Cats</h1>\n        <div\n          className=\"homepage-image\"\n          style={{\n            backgroundImage: \"url(/images/healthyfoods2.jpg)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"contain\",\n            marginLeft: \"100px\",\n            height: \"600px\",\n            width: \"100%\",\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\n/** Presentational component for showing alerts.\n *\n * { signupAndLoginForms } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  return (\n    <div className={`alert alert-${type}`} role=\"alert\">\n      {messages.map((message) => (\n        <p className=\"alert-msg\" key={message}>\n          {message}\n        </p>\n      ))}\n    </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../components/common/Alert\";\nimport \"./SignupAndLoginForms.css\";\nimport \"../components/common/Alert.css\";\n\nfunction SignupAndLoginForms({ signup, login }) {\n  //initialize piece of state object ‘registerFormInputData’ with key:value pairs. email and password are the keys and the values are empty strings\n  const [registerFormInputData, setRegisterFormInputData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  //initialize piece of state object ‘loginFormInputData’ with key:value pairs. email and password are the keys and the values are empty strings\n  const [loginFormInputData, setLoginFormInputData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  // Initialize piece of state 'registerFormErrors' and 'loginFormErrors' to empty arrays (error message if 'signup' function is not successful)\n  const [registerFormErrors, setRegisterFormErrors] = useState([]);\n  const [loginFormErrors, setLoginFormErrors] = useState([]);\n\n  // The 'useHistory' hook gives access to the 'history' object, giving access to several functions to navigate the page (go forward, go backward, redirect to another page, etc)\n  const history = useHistory();\n\n  /* update piece of state 'registerFormInputData' */\n\n  // execute this function whenever a user makes a change to any of the Register Form inputs\n  const handleRegisterChange = (event) => {\n    // deconstruct name and value from event.target (inputs in form)\n    const { name, value } = event.target;\n    // update piece of state 'registerFormInputData' with a new object including everything already in 'registerFormInputData' as well as the name:value pair entered in form input\n    setRegisterFormInputData((registerFormInputData) => ({\n      ...registerFormInputData,\n      [name]: value,\n    }));\n  };\n\n  /* update piece of state 'loginFormInputData' */\n\n  // execute this function whenever a user makes a change to any of the Login Form inputs.\n  const handleLoginChange = (event) => {\n    // deconstruct name and value from event.target (inputs in form)\n    const { name, value } = event.target;\n    // update piece of state 'loginFormInputData' with a new object including everything already in 'loginFormInputData' as well as the name:value pair entered in form input\n    setLoginFormInputData((loginFormInputData) => ({\n      ...loginFormInputData,\n      [name]: value,\n    }));\n  };\n\n  // when Register Form is submitted, this function executes the 'signup' function (defined in the NewApp component) and if property 'result.success' is true (if signup function was successful) then redirect to the homepage; otherwise update piece of state 'registerFormErrors' to result.errors\n  async function handleRegisterSubmit(event) {\n    event.preventDefault();\n    // 'signup' function accepts piece of state 'registerFormInputData' and updates piece of state 'token' with what's returned from the backend route POST request `api/auth/user/register`\n    let result = await signup(registerFormInputData);\n\n    // if signup is successful, 'success' property, set to true, is returned from the 'signup' function and app redirects to homepage\n    if (result.success) {\n      // redirect to homepage\n      history.push(\"/\");\n    } else {\n      // if signup was not successful ('success' property, set to false), set piece of state 'formErrors' to result.errors\n      setRegisterFormErrors(result.errors);\n    }\n  }\n\n  // when Login Form is submitted, this function executes the 'login' function (defined in the NewApp component) and if property 'result.success' is true (if login function was successful) then redirect to the homepage; otherwise update piece of state 'registerFormErrors' to result.errors\n  async function handleLoginSubmit(event) {\n    event.preventDefault();\n    // 'login' function accepts piece of state 'loginFormInputData' and updates piece of state 'token' with what's returned from the backend route POST request `api/auth/user/token`\n    let result = await login(loginFormInputData);\n\n    // if login is successful, 'success' property, set to true, is returned from the 'login' function and app redirects to homepage\n    if (result.success) {\n      // redirect to homepage\n      history.push(\"/\");\n    } else {\n      // if login was not successful ('success' property, set to false), set piece of state 'loginFormErrors' to result.errors\n      setLoginFormErrors(result.errors);\n    }\n  }\n\n  return (\n    <div className=\"Forms\">\n      <div className=\"register\">\n        <h1 className=\"register-header\"> Register</h1>\n        <form onSubmit={handleRegisterSubmit}>\n          <div>\n            <label className=\"register-label\" htmlFor=\"email\">\n              Email\n            </label>\n            <input\n              id=\"register-email\"\n              type=\"text\"\n              name=\"email\"\n              value={registerFormInputData.email}\n              onChange={handleRegisterChange}\n              style={{ width: \"500px\", height: \"30px\" }}\n            />\n          </div>\n\n          <div>\n            <label className=\"register-label\" htmlFor=\"password\">\n              Password\n            </label>\n            <input\n              id=\"register-password\"\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"on\"\n              value={registerFormInputData.password}\n              onChange={handleRegisterChange}\n              style={{ width: \"500px\", height: \"30px\" }}\n            />\n          </div>\n          {registerFormErrors.length ? (\n            <Alert\n              className=\"loginFormError\"\n              type=\"danger\"\n              messages={registerFormErrors}\n            />\n          ) : null}\n\n          <button className=\"register-btn\">Register</button>\n        </form>\n      </div>\n\n      <div className=\"login\">\n        <h1 className=\"login-header\"> Login</h1>\n        <form onSubmit={handleLoginSubmit}>\n          <div>\n            <label className=\"login-label\" htmlFor=\"email\">\n              Email\n            </label>\n            <input\n              id=\"login-email\"\n              type=\"text\"\n              name=\"email\"\n              value={loginFormInputData.email}\n              onChange={handleLoginChange}\n              style={{ width: \"500px\", height: \"30px\" }}\n            />\n          </div>\n          <div>\n            <label className=\"login-label\" htmlFor=\"password\">\n              Password\n            </label>\n            <input\n              id=\"login-password\"\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"on\"\n              value={loginFormInputData.password}\n              onChange={handleLoginChange}\n              style={{ width: \"500px\", height: \"30px\" }}\n            />\n          </div>\n          {loginFormErrors.length ? (\n            <Alert type=\"danger\" messages={loginFormErrors} />\n          ) : null}\n\n          <button className=\"login-btn\">Login</button>\n        </form>\n      </div>\n    </div>\n  );\n}\nexport default SignupAndLoginForms;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./NewProducts.css\";\n\n/** ** Show page with either dogfood or catfood products\n *\n * On mount, loads products from API.\n *\n * This is routed to at /api/products/category/:category\n *\n */\n\n// piece of state 'product' is passed in as a prop\nfunction NewProducts({ product }) {\n  return (\n    <div className=\"products\">\n      <Link className=\"products-link\" to={`/api/products/name/${product.name}`}>\n        <h3 className=\"product-name\">{product.name}</h3>\n        <h5 className=\"product-image\">\n          {product.image_url1 && (\n            <img\n              className=\"product-image\"\n              src={product.image_url1}\n              alt={product.name}\n              style={{ width: \"250px\", height: \"300px\" }}\n            />\n          )}\n        </h5>\n      </Link>\n    </div>\n  );\n}\nexport default NewProducts;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return <div className=\"LoadingSpinner\">Loading ...</div>;\n}\n\nexport default LoadingSpinner;\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport JustRealFoodApi from \"../../api/just_real_food_api\";\nimport NewProducts from \"./NewProducts\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of all products\n *\n * On mount, loads all products from API.\n *\n * This is routed to at /api/products\n *\n * NewProductList renders -> { NewProducts }\n */\n\nfunction NewProductList() {\n  // initialize piece of state 'products' to an empty array\n  const [products, setProducts] = useState([]);\n\n  // useEffect will make an API call only once when component is rendered and retrieves all products from the database\n  useEffect(function getAllProductsOnRender() {\n    // call the listAll function below when component is rendered\n    listAll();\n  }, []);\n\n  /** the listAll function is executed once when component is rendered **/\n  async function listAll() {\n    // retrieve all products from the API\n    let products = await JustRealFoodApi.getAllProducts();\n    // update piece of state 'products' with the results of the API call\n    setProducts(products);\n  }\n  // while products are being retrieved from the API, show the laoding spinner\n  if (!products) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <>\n      <h1 align=\"center\" className=\"ProductList-title\">\n        All Dog and Cat Recipes\n      </h1>\n      {/* if products are retrieved from the database, create a row and in each row create a column with a product name and image (when NewProducts is rendered) for product in products*/}\n      {products.length ? (\n        <Row xs={1} md={3} className=\"g-4\">\n          {/* map over piece of state 'products' and for every product, create a column and render the NewProducts component with piece of state {product} passed in as a prop  */}\n          {products.map((product, idx) => (\n            <Col align=\"center\" key={idx}>\n              <NewProducts product={product} />\n            </Col>\n          ))}\n        </Row>\n      ) : (\n        <p className=\"lead\">Sorry, no results were found!</p>\n      )}\n    </>\n  );\n}\nexport default NewProductList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Row, Col } from \"react-bootstrap\";\nimport JustRealFoodApi from \"../../api/just_real_food_api\";\nimport NewProducts from \"./NewProducts\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with either dogfood or catfood products\n *\n * On mount, loads products from API.\n *\n * This is routed to at /api/products/category/:category\n *\n * ProductDogOrCatFood renders -> <NewProducts />\n */\n\nfunction ProductDogOrCatFood() {\n  // initialize piece of state 'products' to an empty array\n  const [products, setProducts] = useState([]);\n  // destructure 'category' from the params value\n  const { category } = useParams();\n\n  /** the listDogOrCatFoods function is executed once when component is rendered and when 'category' is changed  **/\n  async function listDogOrCatFoods() {\n    // retrieve products with category=products.DogFood or category=products.CatFood from API\n    let products = await JustRealFoodApi.getProductByCategory(category);\n    // update piece of state 'products' with the results of the API call\n    setProducts(products);\n  }\n\n  // useEffect will execute listDogOrCatFoods() and make an API call once when component is rendered and whenever product 'category' changes in the url. All the products in that category are retrieved from the database\n  useEffect(() => {\n    listDogOrCatFoods();\n  }, [category]);\n\n  // while products are being retrieved from the API, show the laoding spinner\n  if (!products) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <>\n      <h1 align=\"center\" className=\"category-title\">\n        {category} Recipes\n      </h1>\n      {/* if products are retrieved from the database, create a row and in each row create a column with a product name and image (when NewProducts is rendered)*/}\n      {products.length ? (\n        <Row xs={1} md={3} className=\"category-row\">\n          {/* map over piece of state 'products' and for every product, create a column and render the NewProducts component with piece of state {product} passed in as a prop  */}\n          {products.map((product, idx) => (\n            <Col align=\"center\" key={idx}>\n              <NewProducts product={product} />\n            </Col>\n          ))}\n          {/* if category is 'DogFood' or 'CatFood', create a Link with specific className used for styling link on the page */}\n          {category === \"DogFood\" ? (\n            <Link className=\"category-dog-return-link\" exact to=\"/api/products\">\n              Return to All Products Page\n            </Link>\n          ) : (\n            <Link className=\"category-cat-return-link\" exact to=\"/api/products\">\n              Return to All Products Page\n            </Link>\n          )}\n        </Row>\n      ) : (\n        <p className=\"lead\">Sorry, no results were found!</p>\n      )}\n    </>\n  );\n}\nexport default ProductDogOrCatFood;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Card, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { NewCartContext } from \"../../NewCartContext\";\nimport UserContext from \"../../auth/UserContext\";\nimport JustRealFoodApi from \"../../api/just_real_food_api\";\nimport \"./NewProductDetail.css\";\n\n/** Show page with details of a specific product and items can be added to users cart when user is logged in  */\n\nfunction NewProductDetail() {\n  // retrieve the parameter (name) from the URL\n  const { name } = useParams();\n\n  // deconstruct 'currentUser' from context value of UserContext declared in NewApp component\n  const { currentUser } = useContext(UserContext);\n\n  // useContext gives access to all the properties in NewCartContext (i.e. cart.items, cart.getProductQuantity(product.id), etc)\n  const cart = useContext(NewCartContext);\n\n  // initialize piece of state 'product' to an object with properties intialized to empty strings\n  const [product, setProduct] = useState({\n    id: \"\",\n    name: \"\",\n    ingredients: \"\",\n    calorie_count: \" \",\n    category: \" \",\n    price: \" \",\n  });\n\n  // useEffect will make an API call once when component is rendered and whenever product 'name' changes in the url, and it retrieves the product with that 'name'' from the database\n  useEffect(() => {\n    async function getProduct() {\n      let result = await JustRealFoodApi.getProductByName(name);\n      return result[0];\n    }\n    getProduct().then((productResult) => {\n      setProduct(productResult);\n    });\n  }, [name]);\n\n  // look to see it there's a product with 'id' in the cart and return the product.quantity\n  const productQuantity = cart.getProductQuantity(product.id);\n\n  return (\n    <Card align=\"right\" style={{ width: \"800px\", height: \"650px\" }}>\n      <Card.Body>\n        {/* if there are products in the cart and user is logged in: */}\n        {productQuantity > 0 && currentUser ? (\n          <>\n            <Form as={Row}>\n              {/* For cart quantities > 1, make 'items' In Cart plural */}\n              {productQuantity > 1 ? (\n                <Form.Label column=\"true\" sm=\"6\">\n                  In Cart: {productQuantity} items\n                </Form.Label>\n              ) : (\n                // for cart quantities=1, make 'items' In Cart singular\n                <Form.Label column=\"true\" sm=\"6\">\n                  In Cart: {productQuantity} item\n                </Form.Label>\n              )}\n\n              <Col sm=\"6\">\n                <Card.Title\n                  className=\"productDetails-cardTitle1\"\n                  align=\"center\"\n                >\n                  {product.name} {product.category} Details\n                </Card.Title>\n                <Card.Text className=\"productDetails-price\" align=\"center\">\n                  ${product.price}\n                </Card.Text>\n                {/* add + and - and remove buttons for adjusting the quantity of the product in the cart */}\n                <div className=\"productDetail-buttons\">\n                  <Button\n                    onClick={() => cart.removeOneItemFromCart(product.id)}\n                    className=\"minus-btn\"\n                  >\n                    -\n                  </Button>\n                  <div className=\"productDetails-productQuantity\">\n                    {productQuantity}\n                  </div>\n                  <Button\n                    onClick={() => cart.addOneItemToCart(product.id)}\n                    className=\"plus-btn\"\n                  >\n                    +\n                  </Button>\n                  <Button\n                    onClick={() => cart.deleteFromCart(product.id)}\n                    className=\"remove-from-cart-btn\"\n                  >\n                    Remove from cart\n                  </Button>\n                </div>\n              </Col>\n            </Form>\n\n            {/* if there is are 2 images to show (dog foods):*/}\n            {product.image_url3 ? (\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img className=\"col-img2\" src={product.image_url2} />\n                </Col>\n                <Col>\n                  <Card.Img className=\"col-img3\" src={product.image_url3} />\n                </Col>\n              </Row>\n            ) : (\n              // if there is only 1 image to show (cat foods):\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img src={product.image_url2} />\n                </Col>\n              </Row>\n            )}\n          </>\n        ) : // if a specific product has not been added to the cart AND the user is logged in, add the Add to Cart button\n        productQuantity === 0 && currentUser ? (\n          <>\n            <Button\n              className=\"addToCart-btn\"\n              onClick={() => cart.addOneItemToCart(product.id)}\n            >\n              Add to Cart\n            </Button>\n            <Card.Title className=\"productDetails-cardTitle2\" align=\"center\">\n              {product.name} {product.category} Details\n            </Card.Title>\n\n            {/* if there is are 2 images to show (dog foods):*/}\n            {product.image_url3 ? (\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img src={product.image_url2} />\n                </Col>\n                <Col>\n                  <Card.Img src={product.image_url3} />\n                </Col>\n              </Row>\n            ) : (\n              // if there is only 1 image to show (cat foods):\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img src={product.image_url2} />\n                </Col>\n              </Row>\n            )}\n          </>\n        ) : (\n          // else if user is not logged in, do not show the 'Add to Cart' button. User must be logged in to add items to the cart\n          <>\n            <Card.Title className=\"productDetails-cardTitle2\" align=\"center\">\n              {product.name} {product.category} Details\n            </Card.Title>\n\n            {/* if there is are 2 images to show (dog foods):*/}\n            {product.image_url3 ? (\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img src={product.image_url2} />\n                </Col>\n                <Col>\n                  <Card.Img src={product.image_url3} />\n                </Col>\n              </Row>\n            ) : (\n              // if there is only 1 image to show (cat foods):\n              <Row className=\"g-4\">\n                <Col>\n                  <Card.Img src={product.image_url2} />\n                </Col>\n              </Row>\n            )}\n          </>\n        )}\n        <Link className=\"ProductDetail-return-link\" to=\"/api/products\">\n          Return to All Products Page\n        </Link>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default NewProductDetail;\n","import React from \"react\";\nimport \"./Cancel.css\";\n\nfunction Cancel() {\n  return <h1 className=\"cancel-h1\">Your Stripe payment was cancelled!</h1>;\n}\n\nexport default Cancel;\n","import React from \"react\";\nimport \"./Success.css\";\n\nfunction Success() {\n  return (\n    <>\n      <h1 className=\"success-h1\">Success!!</h1>\n      <img\n        src=\"/images/checkmark-icon.png\"\n        alt=\"\"\n        className=\"success-img\"\n      ></img>\n      <h2 className=\"success-h2\">Thank you for your purchase!</h2>\n    </>\n  );\n}\n\nexport default Success;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Component for private routes (only can be rendered when user is logged in)\n *\n * In Routes component, use <PrivateRoute ...> instead of <Route ...> for those components that require a user to be logged in. PrivateRoute component will check if there is a valid current user and only continues to the route if so. If no user is logged in, redirects to login form.\n *\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  // deconstruct 'currentUser' from context value of UserContext declared in NewApp component\n  const { currentUser, isRequestCompleted } = useContext(UserContext);\n\n  // if there is no currentUser and 'getCurrentUser' request has been completed (isRequestCompleted=true), redirect to login page so user can login\n  if (!currentUser && isRequestCompleted) {\n    return <Redirect to=\"/signup\" />;\n  }\n\n  return (\n    <Route exact={exact} path={path}>\n      {children}\n    </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./Routes.css\";\n\n// import components\nimport Home from \"../components/home/Home\";\nimport SignupAndLoginForms from \"../auth/SignupAndLoginForms\";\nimport NewProductList from \"../components/products/NewProductList\";\nimport ProductDogOrCatFood from \"../components/products/ProductDogOrCatFood\";\nimport NewProductDetail from \"../components/products/NewProductDetail\";\nimport Cancel from \"../components/Cancel\";\nimport Success from \"../components/Success\";\nimport PrivateRoute from \"./PrivateRoute\";\n\n/** Site-wide routes.\n *\n * Some of the site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * signup(), login() methods are passed in as props so can be used in the signup and login routes\n *\n * Visiting a non-existant route results in a friendly message asking user to click one of the links in the navBar\n */\n\nfunction Routes({ signup, login }) {\n  return (\n    <div className=\"Routes\">\n      <Switch>\n        {/* Route renders Home component when path exactly matches \"/\" */}\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        {/* Route renders SignupAndLoginForms component when path exactly matches \"/signup\" */}\n        <Route exact path=\"/signup\">\n          <SignupAndLoginForms signup={signup} login={login} />\n        </Route>\n\n        {/* Route renders NewProductList component when path exactly matches \"/api/products\". User does not have to be logged in */}\n        <Route exact path=\"/api/products\">\n          <NewProductList />\n        </Route>\n\n        {/* Route renders NewProductDetail component when path exactly matches \"/api/products/:name\". User does not have to be logged in */}\n        <Route exact path=\"/api/products/name/:name\">\n          <NewProductDetail />\n        </Route>\n\n        {/* Route renders ProductDogOrCatFood component when path exactly matches \"/api/products/category/:category\". User does not have to be logged in */}\n        <Route exact path=\"/api/products/category/:category\">\n          <ProductDogOrCatFood />\n        </Route>\n\n        {/* Route renders the Success component when the path exactly matches '/success (used by Stripe to show payment was a success). User must be logged in. */}\n        <PrivateRoute exact path=\"/success\">\n          <Success />\n        </PrivateRoute>\n\n        {/* Route renders the Cancel component when the path exactly matches '/cancel (used by Stripe to show payment was cancelled). User must be logged in.  */}\n        <PrivateRoute exact path=\"/cancel\">\n          <Cancel />\n        </PrivateRoute>\n\n        {/* if a user tries to go to a link isn't one of the above, this friendly message will show up */}\n        <Route>\n          <div>\n            <p className=\"errorHandler1\">\n              Hmmm. I can't seem to find what you want.\n            </p>\n            <p className=\"errorHandler2\">\n              Please click on one of the links above.\n            </p>\n          </div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nexport default Routes;\n","import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates 'item' as piece of state and looks in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, useEffect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  // set initialValue of piece of state 'item' to the key passed in to localStorage or to null if no key exists\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(\n    function setKeyInLocalStorage() {\n      // if piece of state 'item'=null, remove key from localStorage\n      if (item === null) {\n        localStorage.removeItem(key);\n      } else {\n        // if piece of state 'item' is not null, update localStorage with 'key' and 'item'\n        localStorage.setItem(key, item);\n      }\n    },\n    [key, item]\n  );\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NewNavBar from \"./routes-nav/NewNavBar\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\nimport Routes from \"./routes-nav/Routes\";\nimport CartProvider from \"./NewCartContext\";\nimport LoadingSpinner from \"./components/common/LoadingSpinner\";\nimport JustRealFoodApi from \"./api/just_real_food_api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(\"\");\n  const [isRequestCompleted, setIsRequestCompleted] = useState(false);\n\n  /** Load user info from API. Until a user is logged in and they have a token,\n   * this should not run. It only needs to re-run when a user logs out so\n   * the value of the token is a dependency for this effect.\n   * */\n\n  // useEffect will make an API call everytime the token value changes\n  useEffect(\n    function loadUserInfo() {\n      async function getCurrentUser() {\n        // if user has a token:\n        if (token) {\n          try {\n            // deconstruct 'email' from piece of state 'token' (jwt.token() returns an object with the user's information, captured when logging in - the payload)\n            let { email } = jwt.decode(token);\n            // store the token on the JustRealFoodApi class so can use it to call the API.\n            JustRealFoodApi.token = token;\n            // assign 'currentUser' to the result of the API call to get the current user with 'email' assigned to the token passed in as a prop\n            let currentUser = await JustRealFoodApi.getCurrentUser(email);\n\n            // update pieces of state 'currentUser' with the results of the API call and 'isRequestCompleted' as true\n            setCurrentUser(currentUser);\n            setIsRequestCompleted(true);\n\n            // if user does not have a token, show the error message and set piece of state 'currentUser' to null\n          } catch (err) {\n            console.error(\"App loadUserInfo: problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        // Once user data is fetched or if user does not have a token, change piece of state 'infoLoaded' to true to stop the spinner (LoadingSpinner component will not execute when infoLoaded=true)\n        setInfoLoaded(true);\n      }\n\n      // set piece of state 'infoLoaded' to false while async function 'getCurrentUser' runs (LoadingSpinner component will execute when infoLoaded=false)\n      // once the data is fetched (or even if an error happens), 'infoLoaded' will be set back to false to control the spinner\n      setInfoLoaded(false);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  /** Handles site-wide logout. */\n  function logout() {\n    // when logout, pieces of state 'currentUser' and 'token' are reset to null\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically signs users in (sets token) upon signup.\n   *\n   */\n  async function signup(signupData) {\n    try {\n      // make API call to 'signup' method and assign response to piece of state 'token'\n      let token = await JustRealFoodApi.signup(signupData);\n      // update piece of state 'token' with the API response\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login  */\n  async function login(loginData) {\n    try {\n      // make API call to 'login method' and assign response to piece of state 'token'\n      let token = await JustRealFoodApi.login(loginData);\n      // update piece of state 'token' with the API response\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  // if piece of state 'infoLoaded' is false, render the LoadingSpinner component to show Loading ...\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser,\n          isRequestCompleted,\n        }}\n      >\n        {/* everything within CartProvider has access to CartContext (includes piece of state 'cartProducts' as well as the functions for getting, adding and subtracting product quantities, deleting products and getting total cart costs) */}\n        <CartProvider>\n          <Container>\n            {/* pass logout() method as a prop so can be used in NavBar component */}\n            <NewNavBar logout={logout} />\n            {/* pass login() and signup() methods as props so can be used in login and signup routes */}\n            <Routes login={login} signup={signup} />\n          </Container>\n        </CartProvider>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport NewApp from \"./NewApp\";\n\nReactDOM.render(<NewApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}